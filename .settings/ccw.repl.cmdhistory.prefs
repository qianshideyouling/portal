cmdhistory=["(ns portal.http-server\\r\\n  (\:require [clojure.string \:as str]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [clojure.java.io \:as jio]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n(defn multi-atom-get\\r\\n  [map-of-atoms key default-val]\\r\\n  (or (get map-of-atoms key)\\r\\n      (locking map-of-atoms\\r\\n        (or (get map-of-atoms key)\\r\\n            (let [a (atom default-val)]\\r\\n              (.put map-of-atoms key a)\\r\\n              a)))))\\r\\n\\r\\n(deftype SingleUse\\r\\n  [data-payload-atom]\\r\\n  clojure.lang.IDeref\\r\\n  (deref [this]\\r\\n    (let [x @data-payload-atom]\\r\\n      (if (identical? x data-payload-atom)\\r\\n        (throw (Exception. \\"singleuse\: data has been used\\"))\\r\\n        (do (reset\! data-payload-atom data-payload-atom)\\r\\n          x)))))\\r\\n\\r\\n(defn single-use [payload-value]\\r\\n  (SingleUse. (atom payload-value)))\\r\\n\\r\\n(defn random-is \\r\\n  [max]\\r\\n  (let [cnt (atom 0)\\r\\n        r (java.util.Random.)]\\r\\n    (proxy [java.io.InputStream] []\\r\\n      (read [& args]\\r\\n        (cond \\r\\n          (> @cnt max) -1\\r\\n          (\= 0 (count args))\\r\\n          (do (swap\! cnt inc) (.nextInt r 255))\\r\\n          \:otherwise (do (reset\! cnt (+ @cnt (alength (first args))))\\r\\n                       (.nextBytes r (first args))\\r\\n                       (alength (first args))))))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n        (instance? java.io.Reader a) (org.apache.commons.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data need to be String/Reader/byte-array/inputstream, you provided\:\\"\\r\\n                                           (if a (type a)\\r\\n                                             \\"null\\"))))))\\r\\n\\r\\n(defn stream->bytes\\r\\n  [x]\\r\\n  (with-open [out (java.io.ByteArrayOutputStream.)]\\r\\n    (clojure.java.io/copy x out)\\r\\n    (.toByteArray out)))\\r\\n\\r\\n(defn stringify [x]\\r\\n  (cond (string? x) x\\r\\n        (bytes? x) (String. x)\\r\\n        (instance? java.io.InputStream x) (slurp x)\\r\\n        \:else\\r\\n        (str x)))\\r\\n\\r\\n(defn size [frame]\\r\\n  (cond (nil? frame)\\r\\n        0\\r\\n        (string? frame)\\r\\n        (.length frame)\\r\\n        (bytes? frame)\\r\\n        (alength frame)\\r\\n        (instance? java.nio.ByteBuffer frame)\\r\\n        (- (.limit frame) (.position frame))\\r\\n        \:else\\r\\n        -1))\\r\\n\\r\\n(defn to-byte-buffer-seq\\r\\n  ([inputstream]\\r\\n    (let [xsize (* 64 1024)]\\r\\n      (to-byte-buffer-seq inputstream\\r\\n                          xsize\\r\\n                          (int (- xsize (/ xsize 5)))\\r\\n                          1\\r\\n                          (byte-array xsize)\\r\\n                          0\\r\\n                          xsize)))\\r\\n  ([inputstream xsize min-buffer-transfer-size k buffer off remaining]\\r\\n    (let [alen (. inputstream read buffer off remaining)\\r\\n          used (+ off alen)\\r\\n          remaining (- remaining alen)]\\r\\n      (cond (and (\= alen -1) (\= off 0))\\r\\n            nil\\r\\n            (\= alen -1)\\r\\n            (cons (java.nio.ByteBuffer/wrap buffer 0 (inc used))\\r\\n                  nil)\\r\\n            (\= xsize used)\\r\\n            (cons (java.nio.ByteBuffer/wrap buffer)\\r\\n                  (lazy-seq (to-byte-buffer-seq inputstream\\r\\n                                                xsize\\r\\n                                                min-buffer-transfer-size\\r\\n                                                (inc k)\\r\\n                                                (byte-array xsize)\\r\\n                                                0\\r\\n                                                xsize)))\\r\\n            (> used min-buffer-transfer-size)\\r\\n            (cons (java.nio.ByteBuffer/wrap buffer 0 used)\\r\\n                  (lazy-seq (to-byte-buffer-seq inputstream \\r\\n                                                xsize \\r\\n                                                min-buffer-transfer-size\\r\\n                                                (inc k)\\r\\n                                                (byte-array xsize)\\r\\n                                                0\\r\\n                                                xsize)))\\r\\n            \:else\\r\\n            (recur inputstream xsize min-buffer-transfer-size\\r\\n                   (inc k)\\r\\n                   buffer used remaining)))))\\r\\n\\r\\n(defn gz-compress\\r\\n  [inputstream]\\r\\n  nil)\\r\\n\\r\\n(defn send-response \\r\\n  [request-without-body {seq-of-frames \:body \:as ring-response}]\\r\\n  (let [seq-of-frames (single-use seq-of-frames)\\r\\n        meta (dissoc ring-response \:body)\\r\\n        ring-response nil\\r\\n        open (atom true)]\\r\\n    (http/with-channel request-without-body channel\\r\\n      (try \\r\\n        (when-not (\:websocket? request-without-body)\\r\\n          (http/send\! channel meta false))\\r\\n        (http/on-receive channel (fn [data]\\r\\n                                   \\"cannot receive data via websocket.\\"\\r\\n                                   (reset\! open false)))\\r\\n        (http/on-close channel (fn [status]\\r\\n                                 (reset\! open false)))\\r\\n        (let [seq-of-frames @seq-of-frames]\\r\\n          (loop [frame (first seq-of-frames)\\r\\n                 seq-of-frames (rest seq-of-frames)]\\r\\n            (when-not @open (let [x \\"chunked transfer canceled\\"]\\r\\n                              (throw (Exception. x))))\\r\\n            (http/send\! channel frame false)\\r\\n            (when (seq seq-of-frames)\\r\\n              (recur (first seq-of-frames)\\r\\n                     (rest seq-of-frames)))))\\r\\n        (catch Throwable e\\r\\n          (http/close channel)\\r\\n          (throw e)))\\r\\n      (http/close channel))))\\r\\n\\r\\n(defn dont-manipulate-response?\\r\\n  [response]\\r\\n  (or (\= (\:status response) 304)\\r\\n      (and (string? (\:body response)) (\= \\"\\" (\:body response)))\\r\\n      (instance? java.io.File (\:body response))\\r\\n      (nil? (\:body response))))\\r\\n\\r\\n(defn response-needs-compression?\\r\\n  [request response]\\r\\n  (and (not (\:websocket? request))\\r\\n       (not (\:eventsource? request))\\r\\n       (not (\= \\"no-compress\\" (\:content-type request)))\\r\\n       (not (false? (\:compress? response)))))\\r\\n\\r\\n(defn seq-size [body]\\r\\n  (let [body-byte-count (atom 0)\\r\\n        body (map (fn [x] (swap\! body-byte-count + (size x)) x) body)]\\r\\n    [body-byte-count body]))\\r\\n\\r\\n(defn one-before-last \\r\\n  ([item col]\\r\\n    (one-before-last item (first col) (rest col)))\\r\\n  ([item next others]\\r\\n    (if-not (seq others)\\r\\n      [item next]\\r\\n      (cons next (lazy-seq (one-before-last item (first others) (rest\\r\\n                                                                  others)))))))\\r\\n(defn to-event-stream\\r\\n  [seq-of-frames]\\r\\n  (if-not (seq seq-of-frames)\\r\\n    [\\"id\:EMPTY\\\\n\\\\ndata\:EMPTY\\\\n\\\\n\\"]\\r\\n    (cons \\"id\: START\\\\n\\\\n\\"\\r\\n          (->> seq-of-frames\\r\\n            (map (fn [x] (str \\"data\: \\" \\r\\n                              (clojure.string/replace (stringify x)\\r\\n                                                      \#\\"\\\\r?\\\\n\\" \\"\\\\ndata\: \\")\\r\\n                              \\"\\\\n\\\\n\\")))\\r\\n            (one-before-last \\"id\: DONE\\\\n\\\\n\\")))))\\r\\n\\r\\n(defn seq-like?\\r\\n  [col]\\r\\n  (and (not (string? col))\\r\\n       (or (nil? col)\\r\\n           (vector? col)\\r\\n           (seq? col)\\r\\n           (list? col)\\r\\n           (seq col))))\\r\\n\\r\\n(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))\\r\\n\\r\\n(def global-inflight-requests (atom {}))\\r\\n\\r\\n(def global-unique-request-ids (atom -1))\\r\\n\\r\\n(def connections (java.util.HashMap.))\\r\\n\\r\\n(def default-info {\:connect 0\\r\\n                   \:disconnect 0\\r\\n                   \:difference 0\\r\\n                   \:ttlb 0\\r\\n                   \:sending 0\\r\\n                   \:ttfb 0\\r\\n                   \:bytes 0\\r\\n                   \:frame 0})\\r\\n\\r\\n(defn register-connect [ip-address]\\r\\n  (let [ip-address (if (map? ip-address)\\r\\n                     (\:remote-addr ip-address)\\r\\n                     ip-address)\\r\\n        info-atom (multi-atom-get connections ip-address default-info)]\\r\\n    (swap\! info-atom (fn [m]\\r\\n                       (-> m\\r\\n                         (update-in [\:connect] inc)\\r\\n                         (update-in [\:difference] inc))))))\\r\\n\\r\\n(defn register-disconnect\\r\\n  [ip-address sending ttfb ttlb bytes frames]\\r\\n  (let [ip-address (if (map? ip-address)\\r\\n                     (\:remote-addr ip-address)\\r\\n                     ip-address)\\r\\n        info-atom (multi-atom-get connections ip-address default-info)]\\r\\n    (swap\! info-atom (fn [m]\\r\\n                       (-> m\\r\\n                         (update-in [\:disconnect] inc)\\r\\n                         (update-in [\:difference] dec)\\r\\n                         (update-in [\:ttlb] + ttlb)\\r\\n                         (update-in [\:ttfb] + ttfb)\\r\\n                         (update-in [\:sending] + sending)\\r\\n                         (update-in [\:bytes] + (max bytes 0))\\r\\n                         (update-in [\:frames] + (max frames 0)))))))\\r\\n\\r\\n(def global-recent-responses\\r\\n  (java.util.concurrent.ArrayBlockingQueue. 100))\\r\\n\\r\\n(defn add-recent-request-response-pair\\r\\n  [request-without-body response-without-body]\\r\\n  (let [response (if (map? response-without-body)\\r\\n                   (assoc response-without-body\\r\\n                          \:body-byte-count @(\:body-byte-count response-without-body)\\r\\n                          \:frame-count @(\:frame-count response-without-body))\\r\\n                   response-without-body)\\r\\n        pair [request-without-body response]]\\r\\n    (locking global-recent-responses\\r\\n      (when-not (.offer global-recent-responses pair)\\r\\n        (.poll global-recent-responses)\\r\\n        (.offer global-recent-responses pair)))))\\r\\n\\r\\n(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))\\r\\n\\r\\n(defn server [handler-fn result-fn config]\\r\\n  (http/run-server (fn [request] (balancer handler-fn result-fn request))\\r\\n                   (merge {\:max-line (* 100 1024)\\r\\n                           \:max-body (- (* 100 1024 1024) 1)}\\r\\n                          config)))" "(ns portal.api-handler\\r\\n  (\:require [clojure.string \:as str]\\r\\n            [clojure.pprint \:as pp]))\\r\\n\\r\\n(def apis (java.util.HashMap.))\\r\\n\\r\\n(defn register-api [name outputdoc docstring args nargs func]\\r\\n  (.put apis name (array-map \:name name \:outputdoc outputdoc \:docstring docstring \:args args \:nargs nargs \:func func)))\\r\\n\\r\\n(defmacro defapi\\r\\n  [name doc output args & body]\\r\\n  `(let [fn\# (fn ~args ~@body)\\r\\n         nargs\# ~(count args)\\r\\n         fn2\# (fn [~(quote x)] (map fn\# ~(quote x)))]\\r\\n     (def ~name fn\#)\\r\\n     (register-api ~(keyword name) ~output ~doc ~(str args) nargs\# fn\#)\\r\\n     (when (\= 1 nargs\#)\\r\\n       (register-api ~(keyword (str \\"each-\\" name)) ~(str \\"seq of \\" output) ~(str \\"map over input seq. for each item\: \\" doc)\\r\\n                     ~(str (vec (map (comp symbol(partial str \\"seq-of-\\")) args))) nargs\# fn2\#))\\r\\n     true))\\r\\n\\r\\n(defn call [name & args]\\r\\n  (let [api (get apis (keyword name))]\\r\\n    (when-not api\\r\\n      (throw (Exception. (str \\"api\: \\" name \\" not found\\"))))\\r\\n    (when (not\= (\:nargs api) (count args))\\r\\n      (throw (Exception. (str \\"api \\" name \\"expect \\" (\:nargs api) \\"args, but given \\" (count args)))))\\r\\n    (apply (\:func api) args)))\\r\\n\\r\\n(defn nargs [name]\\r\\n  (let [api (get apis (keyword name))]\\r\\n    (when-not api\\r\\n      (throw (Exception. (str \\"api\: \\" name \\" not found\\"))))\\r\\n    (\:nargs api)))\\r\\n\\r\\n(def ^\:dynamic *thread-env* nil)\\r\\n\\r\\n(defn rdelim [delim]\\r\\n  (case delim\\r\\n    \\"^\\" \\"//^\\"\\r\\n    \\"/\\" \\"/\\"\\r\\n    \\".\\" \\"\\\\\\\\.\\"\\r\\n    \\"$\\" \\"\\\\\\\\$\\"\\r\\n    \\"&\\" \\"\\\\\\\\&\\"\\r\\n    nil))\\r\\n\\r\\n(defn numberize [x]\\r\\n  (cond \\r\\n    (not (string? x)) x\\r\\n    (re-matches \#\\"^[\\\\\\\\-]?[0-9]+$\\" x) (Long/parseLong x)\\r\\n    (re-matches \#\\"^[\\\\\\\\-]?[0-9]+[\\\\\\\\.]?[0-9]*$\\" x) (Long/parseLong x)\\r\\n    (re-matches \#\\"^true$\\" x) true\\r\\n    (re-matches \#\\"^false$\\" x) false\\r\\n    \:otherwise x))\\r\\n\\r\\n(defn thread-call-path\\r\\n  ([seed path] (thread-call-path \\"/\\" seed path))\\r\\n  ([delim seed path] \\r\\n    (if (or (empty? path) (\= delim path))\\r\\n      seed\\r\\n      (let [rdelim (rdelim delim)\\r\\n            path (if (string? path)\\r\\n                   (map \#(.replaceAll % \\"@\#@\#@\\" delim)\\r\\n                        (str/split (.replaceAll path (str rdelim rdelim) \\"@\#@\#@\\")\\r\\n                                   (re-pattern rdelim)))\\r\\n                   path)\\r\\n            name (first path)\\r\\n            na (nargs name)\\r\\n            args (take na (rest path))\\r\\n            new-path (drop na (rest path))\\r\\n            _ (when (not\= na (count args)) (throw (Exception. \\"not enough arguments left\\")))\\r\\n            args (map (fn[x] (if (\= x \\"~\\")\\r\\n                               seed\\r\\n                               (numberize x)))\\r\\n                      args)\\r\\n            result (apply call name args)]\\r\\n        (thread-call-path delim result new-path)))))" "(ns portal.core\\r\\n  (\:require [clojure.string \:as str]\\r\\n            [portal.http-server \:as http-server]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [clojure.java.io \:as jio]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [portal.api-handler \:as api]))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(defn get-delim [uri]\\r\\n  \\"/\\")\\r\\n\\r\\n(defn rdelim [delim]\\r\\n  \\"/\\")\\r\\n\\r\\n(defn extract-token [uri delim]\\r\\n  \\"token\\")\\r\\n\\r\\n(defn session [token]\\r\\n  \\"session\\")\\r\\n\\r\\n(defn call-thread [ring-request]\\r\\n  (try (let [payload (\:body ring-request)\\r\\n             uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n             delim (get-delim uri)\\r\\n             rdelim (rdelim delim)\\r\\n             content-type (\:content-type ring-request)\\r\\n             token (extract-token uri delim)\\r\\n             session (session token)]\\r\\n         (when (nil? session)\\r\\n               (throw (Exception. (str \\"session authentication failed, can not authentication token\\" token))))\\r\\n         (binding [api/*thread-env* session]\\r\\n           (let [script (str/replace-first uri (re-pattern (str \\"^/.*?\\" rdelim \\".*?\\" rdelim)) \\"\\")\\r\\n                 response (api/thread-call-path delim payload script)]\\r\\n             response)))\\r\\n    (catch Exception e\\r\\n      (Thread/sleep 50);; accident failure-retry cycle ddos\\r\\n      {\:body (str \\"failure during threading\\" (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(defn call-curl [{uri \:uri \:as ring-request}]\\r\\n  \\"\\")\\r\\n\\r\\n(defn banned? [request]\\r\\n  false)\\r\\n\\r\\n(defn banned-response [ring-request]\\r\\n  nil)\\r\\n\\r\\n\\r\\n(defn calm? [request]\\r\\n  false)\\r\\n\\r\\n(defn calm-response [ring-request]\\r\\n  nil)\\r\\n\\r\\n(defn static-route [ring-request]\\r\\n  (let [uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n        target (.getAbsolutePath (java.io.File. (str \\".\\" uri)))]\\r\\n    (merge (response/file-response target)\\r\\n                                 {\:mime (mime/ext-mime-type target)})))\\r\\n\\r\\n(defn request-handler\\r\\n  [{uri \:uri \:as ring-request}]\\r\\n  (cond (banned? ring-request)\\r\\n        (banned-response ring-request)\\r\\n        (calm? ring-request)\\r\\n        (calm-response ring-request)\\r\\n        \:else\\r\\n        (let [{\:keys [uri status]\\r\\n               \:as ring-request}\\r\\n              (if (.startsWith uri \\"/curl\\")\\r\\n                (call-curl ring-request)\\r\\n                ring-request)]\\r\\n          (cond status ring-request\\r\\n                (.startsWith uri \\"/thread\\") (call-thread ring-request)\\r\\n                \:else (static-route ring-request)))))\\r\\n\\r\\n(defn response-handler [request response]\\r\\n  nil)\\r\\n\\r\\n(defn server [http-options-map]\\r\\n  (http-server/server (fn [request] (request-handler request))\\r\\n                      (fn [request response] (response-handler request response))\\r\\n                      http-options-map))" "(ns portal.launch\\r\\n  (\:require [portal.core \:as portal]))\\r\\n\\r\\n(defonce server-config-map\\r\\n  {\:port 8080})\\r\\n\\r\\n(defn -main []\\r\\n  (print \\"------------------ portal start  --------------------\\\\r\\\\n\\")\\r\\n    (portal/server server-config-map)\\r\\n  (print \\"------------------ portal complete--------------------\\"))" "(-main)" "(ns portal.api-handler)" "(defapi echo [v]\\n  v)" " (defapi echo \\"\\" \\"\\" [v] \\r\\n     v)" "(echo 123)" "(ns portal.core\\r\\n  (\:require [clojure.string \:as str]\\r\\n            [portal.http-server \:as http-server]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [clojure.java.io \:as jio]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [portal.api-handler \:as api]))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(defn get-delim [uri]\\r\\n  \\"/\\")\\r\\n\\r\\n(defn rdelim [delim]\\r\\n  \\"/\\")\\r\\n\\r\\n(defn extract-token [uri delim]\\r\\n  \\"token\\")\\r\\n\\r\\n(defn session [token]\\r\\n  \\"session\\")\\r\\n\\r\\n(defn call-thread [ring-request]\\r\\n  (try (let [payload (\:body ring-request)\\r\\n             uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n             delim (get-delim uri)\\r\\n             rdelim (rdelim delim)\\r\\n             content-type (\:content-type ring-request)\\r\\n             token (extract-token uri delim)\\r\\n             session (session token)]\\r\\n         (when (nil? session)\\r\\n               (throw (Exception. (str \\"session authentication failed, can not authentication token\\" token))))\\r\\n         (binding [api/*thread-env* session]\\r\\n           (let [script (str/replace-first uri (re-pattern (str \\"^/.*?\\" rdelim \\".*?\\" rdelim)) \\"\\")\\r\\n                 response (api/thread-call-path delim payload script)]\\r\\n             response)))\\r\\n    (catch Exception e\\r\\n      (Thread/sleep 50);; accident failure-retry cycle ddos\\r\\n      {\:body (str \\"failure during threading\\" (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(defn call-curl [{uri \:uri \:as ring-request}]\\r\\n  \\"\\")\\r\\n\\r\\n(defn banned? [request]\\r\\n  false)\\r\\n\\r\\n(defn banned-response [ring-request]\\r\\n  nil)\\r\\n\\r\\n\\r\\n(defn calm? [request]\\r\\n  false)\\r\\n\\r\\n(defn calm-response [ring-request]\\r\\n  nil)\\r\\n\\r\\n(defn static-route [ring-request]\\r\\n  (let [uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n        target (.getAbsolutePath (java.io.File. (str \\".\\" uri)))]\\r\\n    (merge (response/file-response target)\\r\\n                                 {\:mime (mime/ext-mime-type target)})))\\r\\n\\r\\n(defn request-handler\\r\\n  [{uri \:uri \:as ring-request}]\\r\\n  (cond (banned? ring-request)\\r\\n        (banned-response ring-request)\\r\\n        (calm? ring-request)\\r\\n        (calm-response ring-request)\\r\\n        \:else\\r\\n        (let [{\:keys [uri status]\\r\\n               \:as ring-request}\\r\\n              (if (.startsWith uri \\"/curl\\")\\r\\n                (call-curl ring-request)\\r\\n                ring-request)]\\r\\n          (cond status ring-request\\r\\n                (.startsWith uri \\"/thread\\") (call-thread ring-request)\\r\\n                \:else (static-route ring-request)))))\\r\\n\\r\\n(defn response-handler [request response]\\r\\n  nil)\\r\\n\\r\\n(defn server [http-options-map]\\r\\n  (http-server/server (fn [request] (request-handler request))\\r\\n                      (fn [request response] (response-handler request response))\\r\\n                      http-options-map))" "(defn request-handler\\r\\n  [{uri \:uri \:as ring-request}]\\n  (prn reing-request)\\r\\n  (cond (banned? ring-request)\\r\\n        (banned-response ring-request)\\r\\n        (calm? ring-request)\\r\\n        (calm-response ring-request)\\r\\n        \:else\\r\\n        (let [{\:keys [uri status]\\r\\n               \:as ring-request}\\r\\n              (if (.startsWith uri \\"/curl\\")\\r\\n                (call-curl ring-request)\\r\\n                ring-request)]\\r\\n          (cond status ring-request\\r\\n                (.startsWith uri \\"/thread\\") (call-thread ring-request)\\r\\n                \:else (static-route ring-request)))))" "(defn request-handler\\r\\n  [{uri \:uri \:as ring-request}]\\n  (prn ring-request)\\r\\n  (cond (banned? ring-request)\\r\\n        (banned-response ring-request)\\r\\n        (calm? ring-request)\\r\\n        (calm-response ring-request)\\r\\n        \:else\\r\\n        (let [{\:keys [uri status]\\r\\n               \:as ring-request}\\r\\n              (if (.startsWith uri \\"/curl\\")\\r\\n                (call-curl ring-request)\\r\\n                ring-request)]\\r\\n          (cond status ring-request\\r\\n                (.startsWith uri \\"/thread\\") (call-thread ring-request)\\r\\n                \:else (static-route ring-request)))))" "(ns portal.api-handler)" "(ns portal.core)" "(defn call-thread [ring-request]\\r\\n  (try (let [payload (\:body ring-request)\\r\\n             uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n             delim (get-delim uri)\\r\\n             rdelim (rdelim delim)\\r\\n             content-type (\:content-type ring-request)\\r\\n             token (extract-token uri delim)\\r\\n             session (session token)]\\r\\n         (when (nil? session)\\r\\n               (throw (Exception. (str \\"session authentication failed, can not authentication token\\" token))))\\r\\n         (binding [api/*thread-env* session]\\r\\n           (let [script (str/replace-first uri (re-pattern (str \\"^/.*?\\" rdelim \\".*?\\" rdelim)) \\"\\")\\n                 _ (prn script)\\r\\n                 response (api/thread-call-path delim payload script)]\\r\\n             response)))\\r\\n    (catch Exception e\\r\\n      (Thread/sleep 50);; accident failure-retry cycle ddos\\r\\n      {\:body (str \\"failure during threading\\" (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))" "(api/thread-call-path \\"/\\" nil \\"\\"echo/123\\"\\")" "(api/thread-call-path \\"/\\" nil \\"echo/123\\")" "(defn call-thread [ring-request]\\r\\n  (try (let [payload (\:body ring-request)\\r\\n             uri (java.net.URLDecoder/decode (\:uri ring-request) \\"UTF-8\\")\\r\\n             delim (get-delim uri)\\r\\n             rdelim (rdelim delim)\\r\\n             content-type (\:content-type ring-request)\\r\\n             token (extract-token uri delim)\\r\\n             session (session token)]\\r\\n         (when (nil? session)\\r\\n               (throw (Exception. (str \\"session authentication failed, can not authentication token\\" token))))\\r\\n         (binding [api/*thread-env* session]\\r\\n           (let [script (str/replace-first uri (re-pattern (str \\"^/.*?\\" rdelim \\".*?\\" rdelim)) \\"\\")\\r\\n                 response (api/thread-call-path delim payload script)\\n                 _ (prn \\"result\: \\" response)]\\r\\n             response)))\\r\\n    (catch Exception e\\r\\n      (Thread/sleep 50);; accident failure-retry cycle ddos\\r\\n      {\:body (str \\"failure during threading\\" (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))" "(ns portal.http-server)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\n              _ (prn response)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\n              _ (prn response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\n              _ (prn \\"pre\\" response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\n              _ (prn \\"lwg111\\")\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)\\n        _ (prn response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            _ (prn body)\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)\\n            _ (prn body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\n            _ (prn body-byte-count)\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body 128;(sm/counting-stream (is body))\\r\\n                                               body   counted-body]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\n            _ (prn body)\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\n            _ (prn body)\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count 0\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(ns portal.http-server)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\n              _ (prn response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(-main)" "(ns portal.launch)" "(-main)" " (defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 _ (prn response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))\\r\\n                 response-without-body (assoc response-without-body \:time-sent \\r\\n                                              (System/currentTimeMillis))\\r\\n                 response-without-body (assoc response-without-body\\r\\n                                              \:ttfb (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:sending (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                       (\:time-in response-without-body)))]\\r\\n             (result-fn request-without-body response-without-body)\\r\\n             (add-recent-request-response-pair request-without-body response-without-body)\\r\\n             (register-disconnect request-without-body\\r\\n                                  (\:sending response-without-body)\\r\\n                                  (\:ttfb response-without-body)\\r\\n                                  (\:ttlb response-without-body)\\r\\n                                  @(\:body-byte-count response-without-body)\\r\\n                                  @(\:frame-count response-without-body))\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (result-fn request-without-body e)\\r\\n             (add-recent-request-response-pair request-without-body e)\\r\\n             (register-disconnect request-without-body 0 0 0 0 0)\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" "(ns portal.http-server)" " (defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 _ (prn response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))\\r\\n                 response-without-body (assoc response-without-body \:time-sent \\r\\n                                              (System/currentTimeMillis))\\r\\n                 response-without-body (assoc response-without-body\\r\\n                                              \:ttfb (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:sending (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                       (\:time-in response-without-body)))]\\r\\n             (result-fn request-without-body response-without-body)\\r\\n             (add-recent-request-response-pair request-without-body response-without-body)\\r\\n             (register-disconnect request-without-body\\r\\n                                  (\:sending response-without-body)\\r\\n                                  (\:ttfb response-without-body)\\r\\n                                  (\:ttlb response-without-body)\\r\\n                                  @(\:body-byte-count response-without-body)\\r\\n                                  @(\:frame-count response-without-body))\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (result-fn request-without-body e)\\r\\n             (add-recent-request-response-pair request-without-body e)\\r\\n             (register-disconnect request-without-body 0 0 0 0 0)\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body (atom 128);(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\n            _ (prn body)\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [_  (prn body)\\n                                               counted-body (atom 128);(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(ns portal.api-handler)" "(defapi echo \\"\\" \\"\\" [v] v)" "(ns portal.http-server)" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [counted-body (atom 128);(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\n            _ (prn body)\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            [body-byte-count body] (cond (\:websocket? request)\\r\\n                                         (seq-size body)\\r\\n                                         (\:eventsource? request)\\r\\n                                         (->> body\\r\\n                                           to-event-stream\\r\\n                                           seq-size)\\r\\n                                         \:else\\r\\n                                         (let [_ (prn body)\\n                                               counted-body (atom 128);(sm/counting-stream (is body))\\r\\n                                               body (if compress? (gz-compress counted-body)\\r\\n                                                      counted-body)]\\r\\n                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count body-byte-count\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n            \\r\\n            ]\\n        (prn body)\\r\\n        (merge {\:frame-count (atom 0)\\r\\n                \:body-byte-count (atom 0)\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn register-disconnect\\r\\n  [ip-address sending ttfb ttlb bytes frames] nil)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\n              _ (prn request-without-body response)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          (register-disconnect request-without-body\\r\\n                               (\:sending response-without-body)\\r\\n                               (\:ttfb response-without-body)\\r\\n                               (\:ttlb response-without-body)\\r\\n                               @(\:body-byte-count response-without-body)\\r\\n                               @(\:frame-count response-without-body))\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(send-response {\:remote-addr \\"0\:0\:0\:0\:0\:0\:0\:1\\", \:time-in 1470559995195, \:scheme \:http, \:eventsource? false, \:request-method \:get, \\n  \:query-string nil, \:content-type nil, \:request-body-length 0, \:websocket? false, \\n  \:async-channel \#<AsyncChannel /0\:0\:0\:0\:0\:0\:0\:1\:8080<->/0\:0\:0\:0\:0\:0\:0\:1\:50643>, \\n  \:uri \\"/thread/1/echo/lwg\\", \:server-name \\"localhost\\", \:headers \\n  {\\"accept\\" \\"text/html, application/xhtml+xml, image/jxr, */*\\", \\n   \\"accept-encoding\\" \\"gzip, deflate\\", \\"accept-language\\" \\"en-US,en;q\=0.8,zh-Hans-CN;q\=0.5,zh-Hans;q\=0.3\\", \\n   \\"connection\\" \\"Keep-Alive\\", \\"host\\" \\"localhost\:8080\\", \\"user-agent\\" \\n   \\"Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv\:11.0; JuziBrowser) like Gecko\\"},\\n  \:content-length 0, \:server-port 8080, \:character-encoding \\"utf8\\", \:id 9} \\n\\n{\:headers {\\"Content-Encoding\\" \\"gzip\\", \\"X-UA-Compatible\\" \\"IE\=Edge\\", \\"Access-Control-Allow-Origin\\" \\"*\\"},\\n \:status 200, \:time-out 1470559995197, \:frame-count \#<Atom@1f15cc\: 0>, \:body-byte-count \#<Atom@d0280b\: 0>, \:body \\"lwg\\"})" "(send-response {\:remote-addr \\"0\:0\:0\:0\:0\:0\:0\:1\\", \:time-in 1470559995195, \:scheme \:http, \:eventsource? false, \:request-method \:get, \\r\\n     \:query-string nil, \:content-type nil, \:request-body-length 0, \:websocket? false, \\r\\n     \:uri \\"/thread/1/echo/lwg\\", \:server-name \\"localhost\\", \:headers \\r\\n     {\\"accept\\" \\"text/html, application/xhtml+xml, image/jxr, */*\\", \\r\\n      \\"accept-encoding\\" \\"gzip, deflate\\", \\"accept-language\\" \\"en-US,en;q\=0.8,zh-Hans-CN;q\=0.5,zh-Hans;q\=0.3\\", \\r\\n      \\"connection\\" \\"Keep-Alive\\", \\"host\\" \\"localhost\:8080\\", \\"user-agent\\" \\r\\n      \\"Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv\:11.0; JuziBrowser) like Gecko\\"},\\r\\n     \:content-length 0, \:server-port 8080, \:character-encoding \\"utf8\\", \:id 9} \\r\\n   \\r\\n   {\:headers {\\"Content-Encoding\\" \\"gzip\\", \\"X-UA-Compatible\\" \\"IE\=Edge\\", \\"Access-Control-Allow-Origin\\" \\"*\\"},\\r\\n    \:status 200, \:time-out 1470559995197, \:frame-count (atom 0 ), \:body-byte-count (atom 0), \:body \\"lwg\\"})" "(to-byte-buffer-seq \\"lwg\\")" "(to-byte-buffer-seq (is \\"lwg\\"))" " (defn prepare-response [request response]\\r\\n     (let [response (if (map? response) response {\:body response})\\r\\n           response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                      \:status 200\\r\\n                                      \:headers {}}\\r\\n                           response)]\\r\\n       (if (dont-manipulate-response? response)\\r\\n         (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n         (let [compress? (response-needs-compression? request response)\\r\\n               meta (dissoc response \:body \:headers)\\r\\n               headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                               \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                        request)\\r\\n                                                                      \\"Origin\\") \\"*\\")}\\r\\n                              (\:headers response))\\r\\n               headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                         headers)\\r\\n               headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                          \\"text/event-stream\\") headers)\\r\\n               body (\:body response)\\r\\n               _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                            (not (seq-like? body)))\\r\\n                   (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n               \\r\\n               ]\\r\\n           (merge {\:frame-count (atom 0)\\r\\n                   \:body-byte-count (atom 0)\\r\\n                   \:body (to-byte-buffer-seq (is body))}\\r\\n                  meta \\r\\n                  {\:headers headers})))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))]\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try \\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))]\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (throw e))))))" "(-main)" "(defn register-disconnect\\r\\n  [ip-address sending ttfb ttlb bytes frames] nil)" "(ns portal.http-server)" "(defn register-disconnect\\r\\n     [ip-address sending ttfb ttlb bytes frames] nil)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          \\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          (register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))\\r\\n                 response-without-body (assoc response-without-body \:time-sent \\r\\n                                              (System/currentTimeMillis))\\r\\n]\\r\\n             (add-recent-request-response-pair request-without-body response-without-body)\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (result-fn request-without-body e)\\r\\n             (add-recent-request-response-pair request-without-body e)\\r\\n             (register-disconnect request-without-body 0 0 0 0 0)\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))\\r\\n                 response-without-body (assoc response-without-body \:time-sent \\r\\n                                              (System/currentTimeMillis))\\r\\n                 response-without-body (assoc response-without-body\\r\\n                                              \:ttfb (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:sending (- (\:time-out response-without-body)\\r\\n                                                       (\:time-in response-without-body))\\r\\n                                              \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                       (\:time-in response-without-body)))]\\r\\n             (add-recent-request-response-pair request-without-body response-without-body)\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (result-fn request-without-body e)\\r\\n             (add-recent-request-response-pair request-without-body e)\\r\\n             (register-disconnect request-without-body 0 0 0 0 0)\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" " (defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    response (prepare-response request-without-body response)\\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    sent-response (if (dont-manipulate-response? response)\\r\\n                                    response\\r\\n                                    (send-response request-without-body response))\\r\\n                    response-without-body (assoc response-without-body \:time-sent \\r\\n                                                 (System/currentTimeMillis))\\r\\n   ]\\r\\n                (add-recent-request-response-pair request-without-body response-without-body)\\r\\n                sent-response)\\r\\n              (catch Throwable e\\r\\n                (result-fn request-without-body e)\\r\\n                (add-recent-request-response-pair request-without-body e)\\r\\n                (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" " (defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    response (prepare-response request-without-body response)\\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    sent-response (if (dont-manipulate-response? response)\\r\\n                                    response\\r\\n                                    (send-response request-without-body response))\\r\\n                    response-without-body (assoc response-without-body \:time-sent \\r\\n                                                 (System/currentTimeMillis))\\r\\n   ]\\r\\n                (add-recent-request-response-pair request-without-body response-without-body)\\r\\n                sent-response)\\r\\n              (catch Throwable e\\r\\n                (result-fn request-without-body e)\\r\\n                (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" " (defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    response (prepare-response request-without-body response)\\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    sent-response (if (dont-manipulate-response? response)\\r\\n                                    response\\r\\n                                    (send-response request-without-body response))\\r\\n                    response-without-body (assoc response-without-body \:time-sent \\r\\n                                                 (System/currentTimeMillis))\\r\\n   ]\\r\\n                sent-response)\\r\\n              (catch Throwable e\\r\\n                (result-fn request-without-body e)\\r\\n                (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n           (let [id (swap\! global-unique-request-ids inc)\\r\\n                 request (assoc request\\r\\n                                \:time-in (System/currentTimeMillis)\\r\\n                                \:request-body-length 0\\r\\n                                \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                 \\"text/event-stream\\")\\r\\n                                \:id id)\\r\\n                 request-without-body (dissoc request \:body)]\\r\\n             (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n               {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n               (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                 (register-connect request-without-body)\\r\\n                 (let [response (handler-fn request)\\r\\n                       response (prepare-response request-without-body response)\\r\\n                       response-without-body (dissoc request \:body)\\r\\n                       sent-response (if (dont-manipulate-response? response)\\r\\n                                       response\\r\\n                                       (send-response request-without-body response))\\n                       (prn response)\\r\\n                       response-without-body (assoc response-without-body \:time-sent \\r\\n                                                    (System/currentTimeMillis))\\r\\n      ]\\r\\n                   sent-response)\\r\\n                 (catch Throwable e\\r\\n                   (result-fn request-without-body e)\\r\\n                   (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                   (throw e))\\r\\n                 (finally\\r\\n                   (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n           (let [id (swap\! global-unique-request-ids inc)\\r\\n                 request (assoc request\\r\\n                                \:time-in (System/currentTimeMillis)\\r\\n                                \:request-body-length 0\\r\\n                                \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                 \\"text/event-stream\\")\\r\\n                                \:id id)\\r\\n                 request-without-body (dissoc request \:body)]\\r\\n             (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n               {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n               (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                 (register-connect request-without-body)\\r\\n                 (let [response (handler-fn request)\\r\\n                       response (prepare-response request-without-body response)\\r\\n                       response-without-body (dissoc request \:body)\\r\\n                       sent-response (if (dont-manipulate-response? response)\\r\\n                                       response\\r\\n                                       (send-response request-without-body response))\\n                       _ (prn response)\\r\\n                       response-without-body (assoc response-without-body \:time-sent \\r\\n                                                    (System/currentTimeMillis))\\r\\n      ]\\r\\n                   sent-response)\\r\\n                 (catch Throwable e\\r\\n                   (result-fn request-without-body e)\\r\\n                   (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                   (throw e))\\r\\n                 (finally\\r\\n                   (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n              (let [id (swap\! global-unique-request-ids inc)\\r\\n                    request (assoc request\\r\\n                                   \:time-in (System/currentTimeMillis)\\r\\n                                   \:request-body-length 0\\r\\n                                   \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                    \\"text/event-stream\\")\\r\\n                                   \:id id)\\r\\n                    request-without-body (dissoc request \:body)]\\r\\n                (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n                  {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                   (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n                  (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                    (register-connect request-without-body)\\r\\n                    (let [response (handler-fn request)\\r\\n                          response (prepare-response request-without-body response)\\r\\n                          response-without-body (dissoc request \:body)\\r\\n                          sent-response (if (dont-manipulate-response? response)\\r\\n                                          response\\r\\n                                          (send-response request-without-body response))\\r\\n                          _ (prn response)\\r\\n                          response-without-body (assoc response-without-body \:time-sent \\r\\n                                                       (System/currentTimeMillis))\\r\\n         ]\\r\\n                      (prn sent-response)\\n                      sent-response)\\r\\n                    (catch Throwable e\\r\\n                      (result-fn request-without-body e)\\r\\n                      (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                      (throw e))\\r\\n                    (finally\\r\\n                      (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n                 (let [id (swap\! global-unique-request-ids inc)\\r\\n                       request (assoc request\\r\\n                                      \:time-in (System/currentTimeMillis)\\r\\n                                      \:request-body-length 0\\r\\n                                      \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                       \\"text/event-stream\\")\\r\\n                                      \:id id)\\r\\n                       request-without-body (dissoc request \:body)]\\r\\n                   (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n                     {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                      (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n                     (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                       (register-connect request-without-body)\\r\\n                       (let [response (handler-fn request)\\r\\n                             response (prepare-response request-without-body response)\\r\\n                             response-without-body (dissoc request \:body)\\r\\n                             sent-response (if (dont-manipulate-response? response)\\r\\n                                             response\\r\\n                                             (send-response request-without-body response))\\r\\n                             _ (prn \\"response\\" response)\\r\\n                             response-without-body (assoc response-without-body \:time-sent \\r\\n                                                          (System/currentTimeMillis))\\r\\n            ]\\r\\n                         sent-response)\\r\\n                       (catch Throwable e\\r\\n                         (result-fn request-without-body e)\\r\\n                         (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                         (throw e))\\r\\n                       (finally\\r\\n                         (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n                    (let [id (swap\! global-unique-request-ids inc)\\r\\n                          request (assoc request\\r\\n                                         \:time-in (System/currentTimeMillis)\\r\\n                                         \:request-body-length 0\\r\\n                                         \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                          \\"text/event-stream\\")\\r\\n                                         \:id id)\\r\\n                          request-without-body (dissoc request \:body)]\\r\\n                      (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n                        {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                         (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n                        (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                          (register-connect request-without-body)\\r\\n                          (let [response (handler-fn request)\\r\\n                                response (prepare-response request-without-body response)\\r\\n                                response-without-body (dissoc request \:body)\\r\\n                                sent-response (if (dont-manipulate-response? response)\\r\\n                                                response\\r\\n                                                (send-response request-without-body response))\\r\\n                                _ (prn \\"response\\" send-response)\\r\\n                                response-without-body (assoc response-without-body \:time-sent \\r\\n                                                             (System/currentTimeMillis))\\r\\n               ]\\r\\n                            sent-response)\\r\\n                          (catch Throwable e\\r\\n                            (result-fn request-without-body e)\\r\\n                            (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                            (throw e))\\r\\n                          (finally\\r\\n                            (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n                    (let [id (swap\! global-unique-request-ids inc)\\r\\n                          request (assoc request\\r\\n                                         \:time-in (System/currentTimeMillis)\\r\\n                                         \:request-body-length 0\\r\\n                                         \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                          \\"text/event-stream\\")\\r\\n                                         \:id id)\\r\\n                          request-without-body (dissoc request \:body)]\\r\\n                      (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n                        {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                         (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n                        (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                          (register-connect request-without-body)\\r\\n                          (let [response (handler-fn request)\\r\\n                                response (prepare-response request-without-body response)\\r\\n                                response-without-body (dissoc request \:body)\\r\\n                                sent-response (if (dont-manipulate-response? response)\\r\\n                                                response\\r\\n                                                (send-response request-without-body response))\\r\\n                                _ (prn \\"response\\" response)\\r\\n                                response-without-body (assoc response-without-body \:time-sent \\r\\n                                                             (System/currentTimeMillis))\\r\\n               ]\\r\\n                            sent-response)\\r\\n                          (catch Throwable e\\r\\n                            (result-fn request-without-body e)\\r\\n                            (register-disconnect request-without-body 0 0 0 0 0)\\r\\n                            (throw e))\\r\\n                          (finally\\r\\n                            (swap\! global-inflight-requests dissoc id))))))" "(defn prepare-response [request response]\\r\\n  (let [response (if (map? response) response {\:body response})\\r\\n        response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                   \:status 200\\r\\n                                   \:headers {}}\\r\\n                        response)]\\r\\n    (if (dont-manipulate-response? response)\\r\\n      (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n      (let [compress? (response-needs-compression? request response)\\r\\n            meta (dissoc response \:body \:headers)\\n            _ (prn \\"meta\\" meta)\\r\\n            headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                            \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                     request)\\r\\n                                                                   \\"Origin\\") \\"*\\")}\\r\\n                           (\:headers response))\\r\\n            headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                      headers)\\r\\n            headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                       \\"text/event-stream\\") headers)\\r\\n            body (\:body response)\\r\\n            _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                         (not (seq-like? body)))\\r\\n                (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n;            [body-byte-count body] (cond (\:websocket? request)\\r\\n;                                         (seq-size body)\\r\\n;                                         (\:eventsource? request)\\r\\n;                                         (->> body\\r\\n;                                           to-event-stream\\r\\n;                                           seq-size)\\r\\n;                                         \:else\\r\\n;                                         (let [counted-body (atom 128);(sm/counting-stream (is body))\\r\\n;                                               body (if compress? (gz-compress counted-body)\\r\\n;                                                      counted-body)]\\r\\n;                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n            frame-count (atom 0)\\r\\n            body (to-byte-buffer-seq (is body))\\r\\n            body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n        (merge {\:frame-count frame-count\\r\\n                \:body-byte-count (atom 0)\\r\\n                \:body body}\\r\\n               meta \\r\\n               {\:headers headers})))))" "(defn prepare-response [request response]\\r\\n     (let [_ (prn \\"response\\" response)\\n           response (if (map? response) response {\:body response})\\r\\n           response (merge {\:time-out (System/currentTimeMillis)\\r\\n                                      \:status 200\\r\\n                                      \:headers {}}\\r\\n                           response)]\\r\\n       (if (dont-manipulate-response? response)\\r\\n         (assoc response \:frame-count (atom -1) \:body-byte-count (atom -1))\\r\\n         (let [compress? (response-needs-compression? request response)\\r\\n               meta (dissoc response \:body \:headers)\\r\\n               _ (prn \\"meta\\" meta)\\r\\n               headers (merge {\\"X-UA-Compatible\\" \\"IE\=Edge\\"\\r\\n                               \\"Access-Control-Allow-Origin\\" (or (get (\:headers \\r\\n                                                                        request)\\r\\n                                                                      \\"Origin\\") \\"*\\")}\\r\\n                              (\:headers response))\\r\\n               headers (if compress? (assoc headers \\"Content-Encoding\\" \\"gzip\\")\\r\\n                         headers)\\r\\n               headers (if (\:eventsource? request) (assoc headers \\"Content-Type\\"\\r\\n                                                          \\"text/event-stream\\") headers)\\r\\n               body (\:body response)\\r\\n               _ (when (and (or (\:websocket? request) (\:eventsource? request))\\r\\n                            (not (seq-like? body)))\\r\\n                   (throw (Exception. (str \\"response must be s sequence, result were instead\: \\"(type body)))))\\r\\n   ;            [body-byte-count body] (cond (\:websocket? request)\\r\\n   ;                                         (seq-size body)\\r\\n   ;                                         (\:eventsource? request)\\r\\n   ;                                         (->> body\\r\\n   ;                                           to-event-stream\\r\\n   ;                                           seq-size)\\r\\n   ;                                         \:else\\r\\n   ;                                         (let [counted-body (atom 128);(sm/counting-stream (is body))\\r\\n   ;                                               body (if compress? (gz-compress counted-body)\\r\\n   ;                                                      counted-body)]\\r\\n   ;                                           [counted-body (to-byte-buffer-seq body)]))\\r\\n               frame-count (atom 0)\\r\\n               body (to-byte-buffer-seq (is body))\\r\\n               body (map (fn [x] (swap\! frame-count inc) x) body)]\\r\\n           (merge {\:frame-count frame-count\\r\\n                   \:body-byte-count (atom 0)\\r\\n                   \:body body}\\r\\n                  meta \\r\\n                  {\:headers headers})))))" "(ns portal.api-handler)" "(defapi echo \\"\\" \\"\\" [v] v)" "(-main)" "(ns portal.http-server)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n              sent-response (if (dont-manipulate-response? response)\\r\\n                              response\\r\\n                              (send-response request-without-body response))]\\r\\n\\r\\n\\r\\n          sent-response)\\r\\n        (catch Throwable e\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 sent-response (if (dont-manipulate-response? response)\\r\\n                                 response\\r\\n                                 (send-response request-without-body response))]\\r\\n   \\r\\n   (prn response)\\r\\n             sent-response)\\r\\n           (catch Throwable e\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n     (let [id (swap\! global-unique-request-ids inc)\\r\\n           request (assoc request\\r\\n                          \:time-in (System/currentTimeMillis)\\r\\n                          \:request-body-length 0\\r\\n                          \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                           \\"text/event-stream\\")\\r\\n                          \:id id)\\r\\n           request-without-body (dissoc request \:body)]\\r\\n       (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n         {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                          (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n         (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n           (register-connect request-without-body)\\r\\n           (let [response (handler-fn request)\\r\\n                 response (prepare-response request-without-body response)\\r\\n                 response-without-body (dissoc request \:body)\\r\\n                 ]\\n             response)\\r\\n           (catch Throwable e\\r\\n             (throw e))\\r\\n           (finally\\r\\n             (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    response (prepare-response request-without-body response)\\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    ]\\n                (prn response)\\r\\n                response)\\r\\n              (catch Throwable e\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    \\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    ]\\r\\n                response)\\r\\n              (catch Throwable e\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n        (let [id (swap\! global-unique-request-ids inc)\\r\\n              request (assoc request\\r\\n                             \:time-in (System/currentTimeMillis)\\r\\n                             \:request-body-length 0\\r\\n                             \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                              \\"text/event-stream\\")\\r\\n                             \:id id)\\r\\n              request-without-body (dissoc request \:body)]\\r\\n          (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n            {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                             (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n            (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n              (register-connect request-without-body)\\r\\n              (let [response (handler-fn request)\\r\\n                    response-without-body (dissoc request \:body)\\r\\n                    ]\\r\\n                {\:response response})\\r\\n              (catch Throwable e\\r\\n                (throw e))\\r\\n              (finally\\r\\n                (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n           (let [id (swap\! global-unique-request-ids inc)\\r\\n                 request (assoc request\\r\\n                                \:time-in (System/currentTimeMillis)\\r\\n                                \:request-body-length 0\\r\\n                                \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                                 \\"text/event-stream\\")\\r\\n                                \:id id)\\r\\n                 request-without-body (dissoc request \:body)]\\r\\n             (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n               {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                                (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n               (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n                 (register-connect request-without-body)\\r\\n                 (let [response (handler-fn request)\\r\\n                       response-without-body (dissoc request \:body)\\r\\n                       ]\\r\\n                   {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    response})\\r\\n                 (catch Throwable e\\r\\n                   (throw e))\\r\\n                 (finally\\r\\n                   (swap\! global-inflight-requests dissoc id))))))" "(-main)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(ns portal.http-server)" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n              response-without-body (assoc response-without-body\\r\\n                                           \:ttfb (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:sending (- (\:time-out response-without-body)\\r\\n                                                    (\:time-in response-without-body))\\r\\n                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n                                                    (\:time-in response-without-body)))]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          ;(add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          ;(add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n;              response-without-body (assoc response-without-body\\r\\n;                                           \:ttfb (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:sending (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n;                                                    (\:time-in response-without-body)))\\r\\n              ]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          ;(add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          ;(add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n;              response-without-body (assoc response-without-body\\r\\n;                                           \:ttfb (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:sending (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n;                                                    (\:time-in response-without-body)))\\r\\n              ]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          (add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          (add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))" "(defn balancer [handler-fn result-fn request]\\r\\n  (let [id (swap\! global-unique-request-ids inc)\\r\\n        request (assoc request\\r\\n                       \:time-in (System/currentTimeMillis)\\r\\n                       \:request-body-length 0\\r\\n                       \:eventsource? (\= (get (\:headers request) \\"accept\\")\\r\\n                                        \\"text/event-stream\\")\\r\\n                       \:id id)\\r\\n        request-without-body (dissoc request \:body)]\\r\\n    (if (and (\:eventsource? request) (get (\:headers request) \\"last-event-id\\"))\\r\\n      {\:status 204 \:body nil \:headers {\\"access-control-allow-origin\\" \\r\\n                                       (or (get (\:headers request) \\"Origin\\") \\"*\\")}}\\r\\n      (try (swap\! global-inflight-requests assoc id request-without-body)\\r\\n        (register-connect request-without-body)\\r\\n        (let [response (handler-fn request)\\r\\n              ;response (prepare-response request-without-body response)\\r\\n              response-without-body (dissoc request \:body)\\r\\n;              sent-response (if (dont-manipulate-response? response)\\r\\n;                              response\\r\\n;                              (send-response request-without-body response))\\r\\n              response-without-body (assoc response-without-body \:time-sent \\r\\n                                           (System/currentTimeMillis))\\r\\n;              response-without-body (assoc response-without-body\\r\\n;                                           \:ttfb (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:sending (- (\:time-out response-without-body)\\r\\n;                                                    (\:time-in response-without-body))\\r\\n;                                           \:ttlb (- (\:time-sent response-without-body)\\r\\n;                                                    (\:time-in response-without-body)))\\r\\n              ]\\r\\n          (result-fn request-without-body response-without-body)\\r\\n          ;(add-recent-request-response-pair request-without-body response-without-body)\\r\\n;          (register-disconnect request-without-body\\r\\n;                              (\:sending response-without-body)\\r\\n;                              (\:ttfb response-without-body)\\r\\n;                              (\:ttlb response-without-body)\\r\\n;                              @(\:body-byte-count response-without-body)\\r\\n;                              @(\:frame-count response-without-body))\\r\\n;          ;sent-response\\r\\n           {\:status  200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body    response})\\r\\n        (catch Throwable e\\r\\n          (result-fn request-without-body e)\\r\\n          ;(add-recent-request-response-pair request-without-body e)\\r\\n          ;(register-disconnect request-without-body 0 0 0 0 0)\\r\\n          (throw e))\\r\\n        (finally\\r\\n          (swap\! global-inflight-requests dissoc id))))))"]
eclipse.preferences.version=1
